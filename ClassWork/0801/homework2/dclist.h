/****************************************************************************************************************************************************************
 * @file         : /ClassWork/0801/homework2/dclist.h
 * @brief        :
 * @author       : a_23456@foxmail.com
 * @date         : 2024-08-01 17:27:58
 * @version      : 1.0
 * @note         :
 * @Copyright    : (c)   2024-2025   a_23456@foxmail.com   All Right Reserved
 *****************************************************************************************************************************************************************/

// DCLIST_H
#ifndef DCLIST_H
#define DCLIST_H

#include <stdbool.h>
#include <stdlib.h>

typedef struct DCListNode {
  int data;                // 节点数据
  struct DCListNode *prev; // 指向前一个节点的指针
  struct DCListNode *next; // 指向下一个节点的指针
} DCListNode;

/****************************************************************************************************************************************************************
 * @name: create_dcnode
 * @brief: 创建一个新的双链表节点
 * @param {int} value 节点数据
 * @return {DCListNode*} 新创建的节点指针
 * @date: 2024-08-01 16:14:59
 * @version: 1.0
 * @note: 如果内存分配失败，将打印错误信息并退出程序
 *****************************************************************************************************************************************************************/
DCListNode *create_dcnode(int value);

/****************************************************************************************************************************************************************
 * @name: insert_head
 * @brief: 在双链表的头部插入一个新节点
 * @param {DCListNode**} head 链表头指针的指针
 * @param {int} value 新节点的数据
 * @return {bool} 插入成功返回 true，否则返回 false
 * @date: 2024-08-01 16:15:12
 * @version: 1.0
 * @note: 如果链表为空，新节点将成为头节点；否则，将新节点插入到链表头部
 *****************************************************************************************************************************************************************/
bool insert_dcnode_head(DCListNode **head, int value);

/****************************************************************************************************************************************************************
 * @name: insert_tail
 * @brief: 在双链表的尾部插入一个新节点
 * @param {DCListNode**} head 链表头指针的指针
 * @param {int} value 新节点的数据
 * @return {bool} 插入成功返回 true，否则返回 false
 * @date: 2024-08-01 16:15:19
 * @version: 1.0
 * @note:
 *如果链表为空，新节点将成为头节点；否则，遍历链表并将新节点插入到链表尾部
 *****************************************************************************************************************************************************************/
bool insert_dcnode_tail(DCListNode **head, int value);

/****************************************************************************************************************************************************************
 * @name: insert_at
 * @brief: 在双链表的指定位置插入一个新节点
 * @param {DCListNode**} head 链表头指针的指针
 * @param {int} value 新节点的数据
 * @param {int} position 插入位置
 * @return {void}
 * @date: 2024-08-01 16:15:26
 * @version: 1.0
 * @note: 如果位置为 0，将调用 `insert_head`
 *函数；否则，遍历链表并将新节点插入到指定位置
 *****************************************************************************************************************************************************************/
void insert_dcnode_at(DCListNode **head, int value, int position);

/****************************************************************************************************************************************************************
 * @name: delete_head
 * @brief: 删除双链表的头节点
 * @param {DCListNode**} head 链表头指针的指针
 * @return {void}
 * @date: 2024-08-01 16:15:34
 * @version: 1.0
 * @note: 如果链表为空或头节点为空，什么都不做；否则，删除头节点并更新头指针
 *****************************************************************************************************************************************************************/
void delete_dcnode_head(DCListNode **head);

/****************************************************************************************************************************************************************
 * @name: delete_tail
 * @brief: 删除双链表的尾节点
 * @param {DCListNode**} head 链表头指针的指针
 * @return {void}
 * @date: 2024-08-01 16:15:40
 * @version: 1.0
 * @note: 如果链表为空，什么都不做；如果链表只有一个节点，删除后将头指针设为
 *NULL；否则，遍历链表找到尾节点并删除
 *****************************************************************************************************************************************************************/
void delete_dcnode_tail(DCListNode **head);

/****************************************************************************************************************************************************************
 * @name: delete_at
 * @brief: 删除双链表指定位置的节点
 * @param {DCListNode**} head 链表头指针的指针
 * @param {int} position 删除的位置
 * @return {void}
 * @date: 2024-08-01 16:15:48
 * @version: 1.0
 * @note: 如果位置为 0，将调用 `delete_head`
 *函数；否则，遍历链表找到指定位置的节点并删除
 *****************************************************************************************************************************************************************/
void delete_dcnode_at(DCListNode **head, int position);

/****************************************************************************************************************************************************************
 * @name: update_dcnode_value
 * @brief: 更新双向循环链表中第一个找到的指定值的节点数据
 * @param {DCListNode*} head 链表头指针
 * @param {int} old_value 旧的数据值
 * @param {int} new_value 新的数据值
 * @return {bool} 更新成功返回 true，否则返回 false
 * @date: 2024-08-01 16:16:03
 * @version: 1.0
 * @note: 遍历链表，找到第一个匹配的节点并更新其数据
 *****************************************************************************************************************************************************************/
bool update_dcnode_value(DCListNode *head, int old_value, int new_value);

/****************************************************************************************************************************************************************
 * @name: search_dcnode_value
 * @brief: 在双向循环链表中搜索指定值的节点
 * @param {DCListNode*} head 链表头指针
 * @param {int} value 要搜索的值
 * @return {DCListNode*} 找到的节点指针，如果未找到返回 NULL
 * @date: 2024-08-01 16:16:13
 * @version: 1.0
 * @note: 遍历链表，找到第一个匹配的节点并返回其指针
 *****************************************************************************************************************************************************************/
DCListNode *search_dcnode_value(DCListNode *head, int value);

/****************************************************************************************************************************************************************
 * @name: print_dclist_forward
 * @brief: 正向打印双向循环链表的所有节点数据
 * @param {DCListNode*} head 链表头指针
 * @return {void}
 * @date: 2024-08-01 16:16:21
 * @version: 1.0
 * @note: 如果链表为空，将打印
 *"链表为空"；否则，正向遍历链表并打印每个节点的数据
 *****************************************************************************************************************************************************************/
void print_dclist_forward(DCListNode *head);

/****************************************************************************************************************************************************************
 * @name: print_dclist_backward
 * @brief: 反向打印双向循环链表的所有节点数据
 * @param {DCListNode*} head 链表头指针
 * @return {void}
 * @date: 2024-08-01 16:16:28
 * @version: 1.0
 * @note: 如果链表为空，将打印
 *"链表为空"；否则，反向遍历链表并打印每个节点的数据
 *****************************************************************************************************************************************************************/
void print_dclist_backward(DCListNode *head);

/****************************************************************************************************************************************************************
 * @name: free_dclist
 * @brief: 释放双向循环链表的所有节点内存
 * @param {DCListNode**} head 链表头指针的指针
 * @return {void}
 * @date: 2024-08-01 16:16:01
 * @version: 1.0
 * @note: 遍历链表并释放每个节点的内存，最后将头指针设为 NULL
 *****************************************************************************************************************************************************************/
void free_dclist(DCListNode **head);

#endif // DCLIST_H
