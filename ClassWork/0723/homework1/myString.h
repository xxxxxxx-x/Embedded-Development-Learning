/****************************************************************************************************************************************************************
 * @file         : /Tools/home/user/Code/ClassWork/0723/homework1/myString.h
 * @brief        : 自定义字符串处理函数的头文件
 * @author       : a_23456@foxmail.com
 * @date         : 2024-07-23 19:23:35
 * @version      : 1.0
 * @note         : 该文件定义了用于处理字符串的函数声明
 * @Copyright    : (c)   2024-2025   a_23456@foxmail.com   All Rights Reserved
 *****************************************************************************************************************************************************************/
#ifndef MYSTRING_H
#define MYSTRING_H

/****************************************************************************************************************************************************************
 * @name: myStrlen
 * @brief: 计算字符串的长度
 * @param {const char} *s  - 指向以 null 结尾的字符串
 * @return {int} - 字符串的长度，不包括 null 终止符
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数用于计算字符串的字符数，不包括 null 终止符。
 *****************************************************************************************************************************************************************/
#include <stdlib.h>
int myStrlen(const char *s);

/****************************************************************************************************************************************************************
 * @name: myStrcpy
 * @brief: 复制字符串
 * @param {char} *dest - 目标字符串缓冲区，必须足够大以容纳源字符串及终止符
 * @param {const char} *src - 源字符串
 * @return {char*} - 返回指向目标字符串的指针
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数将源字符串复制到目标字符串缓冲区。
 *****************************************************************************************************************************************************************/
char *myStrcpy(char *dest, const char *src);

/****************************************************************************************************************************************************************
 * @name: myStrncpy
 * @brief: 复制指定长度的字符串
 * @param {char} *dest - 目标字符串缓冲区，必须足够大以容纳指定长度的字符串
 * @param {const char} *src - 源字符串
 * @param {int} n - 复制的最大字符数
 * @return {char*} - 返回指向目标字符串的指针
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数将源字符串的前 n
 *个字符复制到目标字符串缓冲区。如果源字符串长度小于 n，则目标字符串将被填充
 *null 终止符。
 *****************************************************************************************************************************************************************/
char *myStrncpy(char *dest, const char *src, int n);

/****************************************************************************************************************************************************************
 * @name: myBzero
 * @brief: 将内存区域设置为零
 * @param {void} *s - 指向要设置的内存区域
 * @param {int} n - 要设置的字节数
 * @return {void} - 无返回值
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数将指定内存区域的前 n 个字节设置为零。此函数类似于 `memset`。
 *****************************************************************************************************************************************************************/
void myBzero(void *s, int n);

/****************************************************************************************************************************************************************
 * @name: myStrcat
 * @brief: 连接两个字符串
 * @param {char} *dest - 目标字符串，必须足够大以容纳源字符串及终止符
 * @param {const char} *src - 源字符串
 * @return {char*} - 返回指向目标字符串的指针
 * @date: 2024-07-23
 * @version: 1.0
 * @note:
 *该函数将源字符串追加到目标字符串的末尾，目标字符串必须有足够的空间来存储结果。
 *****************************************************************************************************************************************************************/
char *myStrcat(char *dest, const char *src);

/****************************************************************************************************************************************************************
 * @name: myStrchr
 * @brief: 查找字符串中第一次出现指定字符的位置
 * @param {const char} *s - 要搜索的字符串
 * @param {int} c - 要查找的字符
 * @return {char*} - 返回指向第一次出现字符的位置的指针，如果未找到则返回 NULL
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数在字符串中查找第一次出现的字符，并返回该位置的指针。
 *****************************************************************************************************************************************************************/
char *myStrchr(const char *s, int c);

/****************************************************************************************************************************************************************
 * @name: myStrcmp
 * @brief: 比较两个字符串
 * @param {const char} *s1 - 第一个字符串
 * @param {const char} *s2 - 第二个字符串
 * @return {int} - 返回值小于、等于或大于零，分别表示 s1 小于、等于或大于 s2
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数比较两个字符串并返回差异的整数值。
 *****************************************************************************************************************************************************************/
int myStrcmp(const char *s1, const char *s2);

/****************************************************************************************************************************************************************
 * @name: myStrncasecmp
 * @brief: 比较两个字符串的前 n 个字符，不区分大小写
 * @param {const char} *s1 - 第一个字符串
 * @param {const char} *s2 - 第二个字符串
 * @param {int} n - 要比较的字符数
 * @return {int} - 返回值小于、等于或大于零，分别表示 s1 小于、等于或大于 s2
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数比较两个字符串的前 n 个字符，不区分大小写。
 *****************************************************************************************************************************************************************/
int myStrncasecmp(const char *s1, const char *s2, int n);

/****************************************************************************************************************************************************************
 * @name: myStrstr
 * @brief: 查找子字符串在主字符串中第一次出现的位置
 * @param {const char} *haystack - 主字符串
 * @param {const char} *needle - 要查找的子字符串
 * @return {char*} - 返回指向子字符串第一次出现位置的指针，如果未找到则返回 NULL
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数在主字符串中查找子字符串并返回其位置的指针。
 *****************************************************************************************************************************************************************/
char *myStrstr(const char *haystack, const char *needle);

/****************************************************************************************************************************************************************
 * @name: myStrtok
 * @brief: 分割字符串
 * @param {char} *str - 要分割的字符串
 * @param {const char} *delim - 分隔符字符串
 * @return {char*} - 返回指向当前分割字段的指针，如果没有更多字段则返回 NULL
 * @date: 2024-07-23
 * @version: 1.0
 * @note: 该函数用于分割字符串，将其分割成多个字段，根据分隔符进行分割。
 *****************************************************************************************************************************************************************/
char *myStrtok(char *str, const char *delim);

/****************************************************************************************************************************************************************
 * @name: myAtoi
 * @brief: 将字符串转换为整数
 * @param {const char} *nptr - 要转换的字符串
 * @return {int} - 转换后的整数值
 * @date: 2024-07-24 10:17:01
 * @version: 1.0
 * @note: 该函数将表示整数的字符串转换为整数值。
 *****************************************************************************************************************************************************************/
int myAtoi(const char *nptr);

#endif // MYSTRING_H
