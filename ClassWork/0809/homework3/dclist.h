/****************************************************************************************************************************************************************
 * @file         : /Code/ClassWork/0809/homework3/dclist.h
 * @brief        : 头文件声明链表操作相关函数和结构体
 * @author       : a_23456@foxmail.com
 * @date         : 2024-08-12
 * @version      : 1.0
 * @note         : 包含链表操作相关函数的声明和链表节点的结构体定义
 * @Copyright    : (c) 2024-2025 a_23456@foxmail.com All Rights Reserved
 *****************************************************************************************************************************************************************/

#ifndef DCLIST_H
#define DCLIST_H

#include "kernel_list.h" // 添加内核链表头文件
#include <stdio.h>
#include <stdlib.h>
#include <string.h> // 用于 strcpy 和 strcmp

/****************************************************************************************************************************************************************
 * @name:        struct Node
 * @brief:       定义链表节点结构体
 * @param {char filepath[256]}: 节点存储的文件路径
 * @param {struct list_head list}: 内核链表节点，用于连接链表
 * @return {*}
 * @date:        2024-08-05 14:30:41
 * @version:     1.0
 * @note:        包含数据和链表指针
 *****************************************************************************************************************************************************************/
typedef struct Node {
  char filepath[256];    // 文件路径
  struct list_head list; // 链表指针，用于连接其他节点
} ImageList;

/****************************************************************************************************************************************************************
 * @name:        create_node
 * @brief:       创建并初始化一个新的节点
 * @param {char*} path: 节点要存储的文件路径
 * @return:      新创建的节点指针
 * @date:        2024-08-05 14:30:49
 * @version:     1.0
 * @note:        分配内存并初始化链表节点
 *****************************************************************************************************************************************************************/
ImageList *create_node(const char *path);

/****************************************************************************************************************************************************************
 * @name:        insert_node
 * @brief:       将新节点插入到链表的尾部
 * @param {list_head*} head: 链表头指针
 * @param {char*} path: 节点要存储的文件路径
 * @return:      无
 * @date:        2024-08-05 14:30:55
 * @version:     1.0
 * @note:        创建节点并将其添加到链表尾部
 *****************************************************************************************************************************************************************/
void insert_node(struct list_head *head, const char *path);

/****************************************************************************************************************************************************************
 * @name:        show_nodes
 * @brief:       遍历并显示链表中的所有节点
 * @param {list_head*} head: 链表头指针
 * @return:      无
 * @date:        2024-08-05 14:31:12
 * @version:     1.0
 * @note:        遍历链表并打印每个节点的数据
 *****************************************************************************************************************************************************************/
void show_nodes(struct list_head *head);

/****************************************************************************************************************************************************************
 * @name:        delete_node
 * @brief:       从链表中删除指定数据的节点
 * @param {list_head*} head: 链表头指针
 * @param {char*} del_path: 要删除的节点文件路径
 * @return:      无
 * @date:        2024-08-05 14:31:21
 * @version:     1.0
 * @note:        遍历链表找到并删除指定数据的节点
 *****************************************************************************************************************************************************************/
void delete_node(struct list_head *head, const char *del_path);

/****************************************************************************************************************************************************************
 * @name:        find_node
 * @brief:       查找链表中包含指定数据的节点
 * @param {list_head*} head: 链表头指针
 * @param {char*} search_path: 要查找的文件路径
 * @return:      包含指定数据的节点指针，如果未找到返回 NULL
 * @date:        2024-08-05 14:31:29
 * @version:     1.0
 * @note:        遍历链表查找并返回匹配的数据节点
 *****************************************************************************************************************************************************************/
ImageList *find_node(struct list_head *head, const char *search_path);

/****************************************************************************************************************************************************************
 * @name:        modify_node
 * @brief:       修改链表中指定数据节点的值
 * @param {list_head*} head: 链表头指针
 * @param {char*} old_path: 要修改的节点的旧文件路径
 * @param {char*} new_path: 新的文件路径
 * @return:      无
 * @date:        2024-08-05 14:31:36
 * @version:     1.0
 * @note:        查找节点并修改其数据值
 *****************************************************************************************************************************************************************/
void modify_node(struct list_head *head, const char *old_path, const char *new_path);

/****************************************************************************************************************************************************************
 * @name:        list_splice_tail
 * @brief:       将源链表的节点拼接到目标链表的尾部
 * @param {list_head*} source: 源链表
 * @param {list_head*} target: 目标链表
 * @return:      无
 * @date:        2024-08-05 14:31:43
 * @version:     1.0
 * @note:        将源链表中的所有节点移动到目标链表的尾部
 *****************************************************************************************************************************************************************/
void list_splice_tail(struct list_head *source, struct list_head *target);

#endif // DCLIST_H
