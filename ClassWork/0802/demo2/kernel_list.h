/****************************************************************************************************************************************************************
 * @file         : /ClassWork/0802/demo2/kernel_list.h
 * @brief        : 内核链表实现
 * @date         : 2024-08-02 20:21:48
 * @version      : 1.0
 *****************************************************************************************************************************************************************/
#ifndef KERNEL_LIST_H
#define KERNEL_LIST_H

/****************************************************************************************************************************************************************
 * @name: offsetof
 * @brief: 获取成员在结构体中的偏移量
 * @param {TYPE} - 结构体类型
 * @param {MEMBER} - 成员名
 * @return {size_t} - 成员的偏移量
 * @date: 2024-08-03 09:10:10
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define offsetof(TYPE, MEMBER) ((size_t) & ((TYPE *)0)->MEMBER)

/****************************************************************************************************************************************************************
 * @name: container_of
 * @brief: 获取包含某成员的结构体指针
 * @param {void*} ptr - 成员指针
 * @param {type} type - 结构体类型
 * @param {member} member - 成员名
 * @return {type*} - 结构体指针
 * @date: 2024-08-03 09:10:59
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define container_of(ptr, type, member)                                        \
  ({                                                                           \
    const typeof(((type *)0)->member) *__mptr = (ptr);                         \
    /* 获取成员指针的偏移量 */                                       \
    (type *)((char *)__mptr - offsetof(type, member));                         \
  })

/****************************************************************************************************************************************************************
 * @name: LIST_POISON1
 * @brief: 第一个无效指针，用于检测
 * @param {void} *
 * @return {*}
 * @date: 2024-08-03 09:11:08
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define LIST_POISON1 ((struct list_head *)0x00100100)

/****************************************************************************************************************************************************************
 * @name: LIST_POISON2
 * @brief: 第二个无效指针，用于检测
 * @param {void} *
 * @return {*}
 * @date: 2024-08-03 09:11:16
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define LIST_POISON2 ((struct list_head *)0x00200)

/****************************************************************************************************************************************************************
 * @name: LIST_HEAD_INIT
 * @brief: 初始化链表头
 * @param {struct list_head} name - 链表头
 * @return {struct list_head} - 初始化后的链表头
 * @date: 2024-08-03 09:10:04
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define LIST_HEAD_INIT(name)                                                   \
  { &(name), &(name) }

/****************************************************************************************************************************************************************
 * @name: LIST_HEAD
 * @brief: 定义并初始化链表头
 * @param {list_head} name - 链表头
 * @return {*}
 * @date: 2024-08-03 09:11:44
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)

/****************************************************************************************************************************************************************
 * @name: INIT_LIST_HEAD
 * @brief: 初始化链表头，将链表头的 `next` 和 `prev` 指针都指向自身
 * @param {struct list_head *} ptr 链表头指针
 * @return {void}
 * @date: 2024-08-03 09:09:58
 * @version: 1.0
 * @note:
 *****************************************************************************************************************************************************************/
#define INIT_LIST_HEAD(ptr)                                                    \
  (ptr)->next = (ptr); /* 将指针的下一个节点指向自身 */           \
  (ptr)->prev = (ptr) /* 将指针的前一个节点指向自身 */

/****************************************************************************************************************************************************************
 * @name: DEFINE_LIST_HEAD
 * @brief: 定义并初始化一个链表头，并返回该链表头的对象
 * @param {struct list_head} name - 链表头的名称
 * @return {struct list_head} - 初始化后的链表头对象
 * @date: 2024-08-03 09:20:10
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define DEFINE_LIST_HEAD(name)                                                 \
  LIST_HEAD(name);                                                           \
  INIT_LIST_HEAD(&name)

/****************************************************************************************************************************************************************
 * @name: list_entry
 * @brief: 获取链表元素结构体指针
 * @param {struct list_head*} ptr - 链表节点指针
 * @param {type} type - 结构体类型
 * @param {member} member - 成员名
 * @return {type*} - 结构体指针
 * @date: 2024-08-03 09:09:48
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_entry(ptr, type, member)                                          \
  ((type *)((char *)(ptr)-offsetof(type, member)))

/****************************************************************************************************************************************************************
 * @name: list_for_each
 * @brief: 遍历链表
 * @param {struct list_head*} pos - 用于遍历的指针
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:09:43
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_for_each(pos, head)                                               \
  for (pos = (head)->next; pos != (head); pos = pos->next)

/****************************************************************************************************************************************************************
 * @name: list_for_each_prev
 * @brief: 反向遍历链表
 * @param {struct list_head*} pos - 用于遍历的指针
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:09:10
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_for_each_prev(pos, head)                                          \
  for (pos = (head)->prev; pos != (head); pos = pos->prev)

/****************************************************************************************************************************************************************
 * @name: list_for_each_safe
 * @brief: 遍历链表，安全地删除节点
 * @param {struct list_head*} pos - 用于遍历的指针
 * @param {struct list_head*} n - 临时存储下一个节点的指针
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:09:05
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_for_each_safe(pos, n, head)                                       \
  for (pos = (head)->next, n = pos->next; pos != (head); pos = n, n = pos->next)

/****************************************************************************************************************************************************************
 * @name: list_for_each_entry
 * @brief: 遍历链表中的结构体元素
 * @param {type*} pos - 用于遍历的指针
 * @param {struct list_head*} head - 链表头
 * @param {member} member - 成员名
 * @return {*}
 * @date: 2024-08-03 09:08:58
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_for_each_entry(pos, head, member)                                 \
  for (pos = list_entry((head)->next, typeof(*pos), member);                   \
       &pos->member != (head);                                                 \
       pos = list_entry(pos->member.next, typeof(*pos), member))

/****************************************************************************************************************************************************************
 * @name: list_for_each_entry_safe
 * @brief: 遍历链表中的结构体元素，安全地删除节点
 * @param {type*} pos - 用于遍历的指针
 * @param {type*} n - 临时存储下一个节点的指针
 * @param {struct list_head*} head - 链表头
 * @param {member} member - 成员名
 * @return {*}
 * @date: 2024-08-03 09:06:34
 * @version: 1.0
 *****************************************************************************************************************************************************************/
#define list_for_each_entry_safe(pos, n, head, member)                         \
  for (pos = list_entry((head)->next, typeof(*pos), member),                   \
      n = list_entry(pos->member.next, typeof(*pos), member);                  \
       &pos->member != (head);                                                 \
       pos = n, n = list_entry(n->member.next, typeof(*n), member))

/****************************************************************************************************************************************************************
 * @name: struct list_head
 * @brief: 链表节点结构
 * @date: 2024-08-03 09:15:35
 * @version: 1.0
 *****************************************************************************************************************************************************************/
struct list_head {
  struct list_head *prev; // 指向前驱节点
  struct list_head *next; // 指向后继节点
};

/****************************************************************************************************************************************************************
 * @name: __list_add
 * @brief: 在两个已知节点之间插入新节点
 * @param {struct list_head*} new_node - 新节点
 * @param {struct list_head*} prev - 前驱节点
 * @param {struct list_head*} next - 后继节点
 * @return {*}
 * @date: 2024-08-03 09:15:56
 * @version: 1.0
 * @note: 内部使用，不直接调用
 *****************************************************************************************************************************************************************/
static inline void __list_add(struct list_head *new_node,
                              struct list_head *prev, struct list_head *next) {
  next->prev = new_node; // 新节点的下一个节点的前驱指向新节点
  new_node->next = next; // 新节点的下一个节点指向原来的下一个节点
  new_node->prev = prev; // 新节点的前驱指向原来的前驱节点
  prev->next = new_node; // 原来的前驱节点的下一个节点指向新节点
}

/****************************************************************************************************************************************************************
 * @name: list_add
 * @brief: 将新节点插入到链表头之后
 * @param {struct list_head*} new_node - 新节点
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:16:26
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_add(struct list_head *new_node,
                            struct list_head *head) {
  __list_add(new_node, head, head->next);
}

/****************************************************************************************************************************************************************
 * @name: list_add_tail
 * @brief: 将新节点插入到链表尾之前
 * @param {struct list_head*} new_node - 新节点
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:16:39
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_add_tail(struct list_head *new_node,
                                 struct list_head *head) {
  __list_add(new_node, head->prev, head);
}

/****************************************************************************************************************************************************************
 * @name: __list_del
 * @brief: 从链表中删除节点
 * @param {struct list_head*} prev - 前驱节点
 * @param {struct list_head*} next - 后继节点
 * @return {*}
 * @date: 2024-08-03 09:16:54
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void __list_del(struct list_head *prev, struct list_head *next) {
  next->prev = prev;
  prev->next = next;
}

/****************************************************************************************************************************************************************
 * @name: list_del
 * @brief: 删除指定节点
 * @param {struct list_head*} entry - 要删除的节点
 * @return {*}
 * @date: 2024-08-03 09:17:13
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_del(struct list_head *entry) {
  __list_del(entry->prev, entry->next);
  entry->next = LIST_POISON1;
  entry->prev = LIST_POISON2;
}

/****************************************************************************************************************************************************************
 * @name: list_del_init
 * @brief: 删除指定节点并重新初始化
 * @param {struct list_head*} entry - 要删除的节点
 * @return {*}
 * @date: 2024-08-03 09:17:28
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_del_init(struct list_head *entry) {
  __list_del(entry->prev, entry->next);
  INIT_LIST_HEAD(entry);
}

/****************************************************************************************************************************************************************
 * @name: list_empty
 * @brief: 检查链表是否为空
 * @param {struct list_head*} head - 链表头
 * @return {int} - 为空返回1，不为空返回0
 * @date: 2024-08-03 09:17:42
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline int list_empty(const struct list_head *head) {
  return head->next == head;
}

/****************************************************************************************************************************************************************
 * @name: list_move
 * @brief: 将指定节点移动到链表头之后
 * @param {struct list_head*} list - 要移动的节点
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:17:55
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_move(struct list_head *list, struct list_head *head) {
  __list_del(list->prev, list->next);
  list_add(list, head);
}

/****************************************************************************************************************************************************************
 * @name: list_move_tail
 * @brief: 将指定节点移动到链表尾之前
 * @param {struct list_head*} list - 要移动的节点
 * @param {struct list_head*} head - 链表头
 * @return {*}
 * @date: 2024-08-03 09:18:09
 * @version: 1.0
 *****************************************************************************************************************************************************************/
static inline void list_move_tail(struct list_head *list,
                                  struct list_head *head) {
  __list_del(list->prev, list->next);
  list_add_tail(list, head);
}

#endif // KERNEL_LIST_H
