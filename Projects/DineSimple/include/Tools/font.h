/****************************************************************************************************************************************************************
 * @file         : /DineSimple/include/Tools/font.h
 * @brief        : 字体处理相关的头文件
 * @author       : a_23456@foxmail.com
 * @date         : 2024-08-15 12:56:22
 * @version      : 1.0
 * @note         : 定义了处理字体、位图等相关功能的结构体和函数
 * @Copyright    : (c)   2024-2025   a_23456@foxmail.com   All Right Reserved
 *****************************************************************************************************************************************************************/

#ifndef FONT_H
#define FONT_H

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>

#define color u32 // 定义 color 为 u32 类型
/****************************************************************************************************************************************************************
 * @name: getColor
 * @brief: 生成一个 32 位颜色值
 * @param {u8} A -  透明度分量
 * @param {u8} R -  红色分量
 * @param {u8} G -  绿色分量
 * @param {u8} B -  蓝色分量
 * @return: color - 组合后的 32 位颜色值
 * @date: 2024-08-16 21:24:53
 * @version: 1.0
 * @note: 通过位移和按位或操作，将各个颜色分量组合成一个 32 位颜色值
 *****************************************************************************************************************************************************************/
#define getColor(A, R, G, B) (A | B << 8 | G << 16 | R << 24)

typedef unsigned char u8;       // 无符号 8 位整数
typedef unsigned short u16;     // 无符号 16 位整数
typedef unsigned int u32;       // 无符号 32 位整数
typedef unsigned long long u64; // 无符号 64 位整数

typedef char s8;       // 有符号 8 位整数
typedef short s16;     // 有符号 16 位整数
typedef int s32;       // 有符号 32 位整数
typedef long long s64; // 有符号 64 位整数

/****************************************************************************************************************************************************************
 * @name: stbtt_fontinfo
 * @brief: 字体信息结构体
 * @param {void*} userdata - 用户数据
 * @param {unsigned char*} data - 指向字体文件（.ttf 文件）的指针
 * @param {int} fontstart - 字体起始位置的偏移量
 * @param {int} numGlyphs - 字形的数量
 * @param {int} loca, head, glyf, hhea, hmtx, kern - 字体表的位置偏移量
 * @param {int} index_map - 字符编码映射
 * @param {int} indexToLocFormat - 从字形索引到字形的映射格式
 * @return:
 * @date: 2024-08-16 21:24:35
 * @version: 1.0
 * @note: 用于存储字体信息和管理字体表的位置
 *****************************************************************************************************************************************************************/
typedef struct stbtt_fontinfo {
  void *userdata;
  unsigned char *data; // 指向 .ttf 文件的指针
  int fontstart;       // 字体起始位置的偏移量

  int numGlyphs; // 字形数量

  int loca, head, glyf, hhea, hmtx, kern; // 各字体表的位置偏移量
  int index_map;                          // 字符编码映射
  int indexToLocFormat; // 从字形索引到字形的映射格式
} stbtt_fontinfo;

/****************************************************************************************************************************************************************
 * @name: bitmap
 * @brief: 位图信息结构体
 * @param {u32} height - 位图高度
 * @param {u32} width - 位图宽度
 * @param {u32} byteperpixel - 每个像素的字节数
 * @param {u8*} map - 指向位图数据的指针
 * @return:
 * @date: 2024-08-16 21:24:29
 * @version: 1.0
 * @note: 用于存储位图的尺寸和数据
 *****************************************************************************************************************************************************************/
typedef struct {
  u32 height;       // 位图高度
  u32 width;        // 位图宽度
  u32 byteperpixel; // 每个像素的字节数
  u8 *map;          // 指向位图数据的指针
} bitmap;

/****************************************************************************************************************************************************************
 * @name: font
 * @brief: 字体结构体
 * @param {stbtt_fontinfo*} info - 字体信息指针
 * @param {u8*} buffer - 指向字体数据缓冲区的指针
 * @param {float} scale - 字体缩放比例
 * @return:
 * @date: 2024-08-16 21:24:20
 * @version: 1.0
 * @note: 用于存储字体相关信息和设置字体大小
 *****************************************************************************************************************************************************************/
typedef struct {
  stbtt_fontinfo *info; // 字体信息
  u8 *buffer;           // 字体数据缓冲区
  float scale;          // 字体缩放比例
} font;

/****************************************************************************************************************************************************************
 * @name: LcdDevice
 * @brief: LCD 设备结构体
 * @param {int} fd - 文件描述符
 * @param {unsigned int*} mp - 映射的首地址
 * @return:
 * @date: 2024-08-16 21:24:20
 * @version: 1.0
 * @note: 用于管理 LCD 设备的映射和文件描述符
 *****************************************************************************************************************************************************************/
struct LcdDevice {
  int fd;           // 文件描述符
  unsigned int *mp; // 映射的首地址
};

/****************************************************************************************************************************************************************
 * @name: fontLoad
 * @brief: 加载字体文件
 * @param {char*} fontPath - 字体文件的路径
 * @return: font* - 返回字体结构体指针
 * @date: 2024-08-16 21:24:10
 * @version: 1.0
 * @note: 加载指定路径的字体文件，并返回一个 `font` 结构体指针
 *****************************************************************************************************************************************************************/
font *fontLoad(char *fontPath);

/****************************************************************************************************************************************************************
 * @name: fontSetSize
 * @brief: 设置字体大小
 * @param {font*} f - 字体结构体指针
 * @param {s32} pixels - 字体大小（像素）
 * @return: void
 * @date: 2024-08-16 21:24:03
 * @version: 1.0
 * @note: 设置指定字体的大小
 *****************************************************************************************************************************************************************/
void fontSetSize(font *f, s32 pixels);

/****************************************************************************************************************************************************************
 * @name: createBitmap
 * @brief: 创建一个位图
 * @param {u32} width - 位图宽度
 * @param {u32} height - 位图高度
 * @param {u32} byteperpixel - 每个像素的字节数
 * @return: bitmap* - 返回位图结构体指针
 * @date: 2024-08-16 21:23:53
 * @version: 1.0
 * @note: 创建一个指定尺寸和像素格式的位图
 *****************************************************************************************************************************************************************/
bitmap *createBitmap(u32 width, u32 height, u32 byteperpixel);

/****************************************************************************************************************************************************************
 * @name: createBitmapWithInit
 * @brief: 创建一个指定颜色的位图
 * @param {u32} width - 位图宽度
 * @param {u32} height - 位图高度
 * @param {u32} byteperpixel - 每个像素的字节数
 * @param {color} c - 指定的颜色
 * @return: bitmap* - 返回位图结构体指针
 * @date: 2024-08-16 21:23:15
 * @version: 1.0
 * @note: 创建一个指定尺寸和颜色的位图
 *****************************************************************************************************************************************************************/
bitmap *createBitmapWithInit(u32 width, u32 height, u32 byteperpixel, color c);

/****************************************************************************************************************************************************************
 * @name: fontPrint
 * @brief: 在位图上打印文本
 * @param {font*} f - 字体结构体指针
 * @param {bitmap*} screen - 指向位图的指针
 * @param {s32} x - 文本的起始 X 坐标
 * @param {s32} y - 文本的起始 Y 坐标
 * @param {char*} text - 要打印的文本
 * @param {color} c - 文本的颜色
 * @param {s32} maxWidth - 最大宽度限制
 * @return: void
 * @date: 2024-08-16 21:23:02
 * @version: 1.0
 * @note: 在指定的位图上打印文本
 *****************************************************************************************************************************************************************/
void fontPrint(font *f, bitmap *screen, s32 x, s32 y, char *text, color c,
               s32 maxWidth);

/****************************************************************************************************************************************************************
 * @name: fontUnload
 * @brief: 卸载字体
 * @param {font*} f - 字体结构体指针
 * @return: void
 * @date: 2024-08-16 21:22:35
 * @version: 1.0
 * @note: 卸载并释放字体相关资源
 *****************************************************************************************************************************************************************/
void fontUnload(font *f);

/****************************************************************************************************************************************************************
 * @name: destroyBitmap
 * @brief: 销毁位图
 * @param {bitmap*} bm - 位图结构体指针
 * @return: void
 * @date: 2024-08-16 21:22:22
 * @version: 1.0
 * @note: 释放位图占用的资源
 *****************************************************************************************************************************************************************/
void destroyBitmap(bitmap *bm);

#endif // FONT_H
