/****************************************************************************************************************************************************************
 * @file         : /DineSimple/include/Tasks/tasks.h
 * @brief        : 线程任务的头文件，声明了与线程相关的任务函数
 * @author       : a_23456@foxmail.com
 * @date         : 2024-08-15 20:25:31
 * @version      : 1.0
 * @note         :
 * 包含时间获取任务和触摸屏任务的函数声明，以及线程创建函数的声明
 * @Copyright    : (c)   2024-2025   a_23456@foxmail.com   All Right Reserved
 *****************************************************************************************************************************************************************/

#ifndef TASKS_H
#define TASKS_H

#include <pthread.h>

// 条件变量和互斥锁的声明
extern pthread_cond_t screen_cond; // 条件变量，用于线程间同步
extern pthread_mutex_t screen_mutex; // 互斥锁，用于保护共享数据的访问

/**
 * @brief 线程结构体，包含线程的相关信息
 */
typedef struct {
  pthread_t thread_id;         // 线程标识符
  void (*thread_func)(void *); // 线程函数指针
  void *arg;                   // 传递给线程函数的参数
  char name[256];              // 线程名称
  int group_id;                // 线程组标识符
} Thread;

/**
 * @brief 最大线程数量
 */
#define MAX_THREADS 100

/**
 * @brief 线程数组，用于存储线程信息
 */
extern Thread thread_array[MAX_THREADS];
extern int thread_count;

/****************************************************************************************************************************************************************
 * @name: create_thread
 * @brief: 创建并启动一个线程
 * @param {void (*thread_func)(void *)} thread_func -
 *线程函数的指针，该函数接受一个 void* 类型的参数，并没有返回值
 * @param {void*} arg - 传递给线程函数的参数
 * @param {const char*} name - 线程名称
 * @param {int} group_id - 线程组标识符
 * @return {pthread_t} - 返回创建的线程标识符
 * @date: 2024-08-16 14:26:41
 * @version: 1.1
 * @note:
 * 该函数使用指定的线程函数、参数、名称和组ID创建一个新的线程，并启动该线程。如果线程创建失败，会打印错误信息并终止程序。
 *****************************************************************************************************************************************************************/
pthread_t create_thread(void (*thread_func)(void *), void *arg,
                        const char *name, int group_id);

/****************************************************************************************************************************************************************
 * @name: destroy_thread
 * @brief: 销毁一个已经创建完成且在运行中的线程
 * @param {pthread_t} thread - 要销毁的线程标识符
 * @return {void} - 无返回值
 * @date: 2024-08-17
 * @version: 1.0
 * @note:
 * 该函数使用线程标识符销毁一个已经创建完成且在运行中的线程。如果线程销毁失败，会打印错误信息并终止程序。
 *****************************************************************************************************************************************************************/
void destroy_thread(pthread_t thread);

/****************************************************************************************************************************************************************
 * @name: find_thread_by_name
 * @brief: 根据线程名称查找线程标识符
 * @param {const char*} name - 线程名称
 * @return {pthread_t} - 线程标识符，如果找不到返回 NULL
 * @date: 2024-08-17
 * @version: 1.0
 * @note:
 * 该函数遍历线程数组，查找具有指定名称的线程，并返回其标识符。如果没有找到对应的线程，返回
 *NULL。
 *****************************************************************************************************************************************************************/
pthread_t find_thread_by_name(const char *name);

/****************************************************************************************************************************************************************
 * @name: destroy_threads_by_group
 * @brief: 销毁指定线程组的所有线程
 * @param {int} group_id - 线程组标识符
 * @return {void} - 无返回值
 * @date: 2024-08-17
 * @version: 1.0
 * @note:
 * 该函数遍历线程数组，销毁所有属于指定线程组的线程。
 *****************************************************************************************************************************************************************/
void destroy_threads_by_group(int group_id);

#endif // TASKS_H
